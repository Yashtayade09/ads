//KruskalsAlgorithm
package prac;

import java.util.*;


class Edge implements Comparable<Edge> {
 int source, destination, weight;

 public Edge(int source, int destination, int weight) {
     this.source = source;
     this.destination = destination;
     this.weight = weight;
 }


 @Override
 public int compareTo(Edge other) {
     return this.weight - other.weight;
 }
}

class Subset {
 int parent, rank;
}

public class KruskalsAlgorithm {

 
 private static int find(Subset[] subsets, int node) {
     if (subsets[node].parent != node) {
         subsets[node].parent = find(subsets, subsets[node].parent);
     }
     return subsets[node].parent;
 }

 
 private static void union(Subset[] subsets, int root1, int root2) {
     if (subsets[root1].rank < subsets[root2].rank) {
         subsets[root1].parent = root2;
     } else if (subsets[root1].rank > subsets[root2].rank) {
         subsets[root2].parent = root1;
     } else {
         subsets[root2].parent = root1;
         subsets[root1].rank++;
     }
 }

 
 public static void kruskalMST(int vertices, List<Edge> edges) {
     
     Collections.sort(edges);

     
     Subset[] subsets = new Subset[vertices];
     for (int i = 0; i < vertices; i++) {
         subsets[i] = new Subset();
         subsets[i].parent = i;
         subsets[i].rank = 0;
     }

     List<Edge> mst = new ArrayList<>();
     int mstCost = 0;

     for (Edge edge : edges) {
         int root1 = find(subsets, edge.source);
         int root2 = find(subsets, edge.destination);

        
         if (root1 != root2) {
             mst.add(edge); 
             mstCost += edge.weight;
             union(subsets, root1, root2);
         }
     }

    
     System.out.println("Edges in the Minimum Spanning Tree:");
     for (Edge edge : mst) {
         System.out.println(edge.source + " - " + edge.destination + " : " + edge.weight);
     }
     System.out.println("Total cost of MST: " + mstCost);
 }

 public static void main(String[] args) {
     Scanner scanner = new Scanner(System.in);

     System.out.println("Enter the number of cities (vertices):");
     int vertices = scanner.nextInt();

     System.out.println("Enter the number of roads (edges):");
     int edgesCount = scanner.nextInt();

     List<Edge> edges = new ArrayList<>();

     System.out.println("Enter the roads (source, destination, weight):");
     for (int i = 0; i < edgesCount; i++) {
         int source = scanner.nextInt();
         int destination = scanner.nextInt();
         int weight = scanner.nextInt();
         
        
         if (source < 0 || source >= vertices || destination < 0 || destination >= vertices) {
             System.out.println("Invalid edge: source and destination must be between 0 and " + (vertices - 1));
             i--; 
             continue;
         }

         edges.add(new Edge(source, destination, weight));
     }

     kruskalMST(vertices, edges);

     scanner.close();
 }
}
