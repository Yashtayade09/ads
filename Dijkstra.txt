//DijkstraAlgorithm
package prac;

import java.util.*;


public class DijkstraAlgorithm {

 
 static class Node implements Comparable<Node> {
     int vertex, weight;

     public Node(int vertex, int weight) {
         this.vertex = vertex;
         this.weight = weight;
     }

     @Override
     public int compareTo(Node other) {
         return this.weight - other.weight; 
     }
 }


 public static void dijkstra(int vertices, List<List<Node>> graph, int source) {
     int[] distances = new int[vertices]; 
     Arrays.fill(distances, Integer.MAX_VALUE); 
     distances[source] = 0; 

     PriorityQueue<Node> pq = new PriorityQueue<>();
     pq.add(new Node(source, 0));

     boolean[] visited = new boolean[vertices]; 

     while (!pq.isEmpty()) {
         Node currentNode = pq.poll();
         int currentVertex = currentNode.vertex;

        
         if (visited[currentVertex]) continue;
         visited[currentVertex] = true;

        
         for (Node neighbor : graph.get(currentVertex)) {
             int neighborVertex = neighbor.vertex;
             int edgeWeight = neighbor.weight;

            
             if (!visited[neighborVertex] && distances[currentVertex] + edgeWeight < distances[neighborVertex]) {
                 distances[neighborVertex] = distances[currentVertex] + edgeWeight;
                 pq.add(new Node(neighborVertex, distances[neighborVertex]));
             }
         }
     }

     
     System.out.println("Shortest distances from source " + source + ":");
     for (int i = 0; i < vertices; i++) {
         System.out.println("To " + i + " : " + (distances[i] == Integer.MAX_VALUE ? "Unreachable" : distances[i]));
     }
 }

 public static void main(String[] args) {
     Scanner scanner = new Scanner(System.in);

     System.out.println("Enter the number of locations (vertices):");
     int vertices = scanner.nextInt();

     System.out.println("Enter the number of roads (edges):");
     int edges = scanner.nextInt();

     
     List<List<Node>> graph = new ArrayList<>();
     for (int i = 0; i < vertices; i++) {
         graph.add(new ArrayList<>());
     }

     System.out.println("Enter the roads (source, destination, distance):");
     for (int i = 0; i < edges; i++) {
         int source = scanner.nextInt();
         int destination = scanner.nextInt();
         int distance = scanner.nextInt();

        
         graph.get(source).add(new Node(destination, distance));
         graph.get(destination).add(new Node(source, distance));
     }

     System.out.println("Enter the source location:");
     int source = scanner.nextInt();

     
     dijkstra(vertices, graph, source);

     scanner.close();
 }
}
